# Jamfile -- Instructions for building the Memory Pool System (MPS)
#
# Richard Brooksby, Ravenbrook Limited, 2006-05-13
#
# $Id$
#
# This file is input to Jam <http://www.perforce.com/jam/jam.html>, which
# is a "make" replacement, which we use because make programs (even GNU Make,
# Automake, etc.) is too stupid to build MPS varieties.  Actually, we did
# have it going with GNU Make for quite a while, but it was a horribly tangly
# recursive mess.
#
# NOTES
#
# 1. Need a way to detect which C compiler we're using and add flags for
# warnings etc.  Also want to add "-f" flags to build Universal binaries on
# Intel Macs, etc.
#
# 2. It should be fairly easy to get cross-compilation working, overriding
# the OS and OSPLAT variables and passing the right flags to the compiler.
#

Echo "OSFULL" $(OSFULL) ;
Echo "OS" $(OS) ;
Echo "OSPLAT" $(OSPLAT) ;

libraries = mps ;
tests = amcss mpmss ;
varieties = hi ci ;

defs = CONFIG_PROD_MPS ;
defs_hi = CONFIG_VAR_HI ;
defs_ci = CONFIG_VAR_CI ;
defs_NT = WIN32 WINDOWS ;
defs_FREEBSD = _REENTRANT ;

mps_sources =
  mpsi.c mpm.c arenavm.c arenacl.c arena.c global.c locus.c tract.c
  walk.c reserv.c protocol.c pool.c poolabs.c trace.c root.c seg.c
  format.c buffer.c ref.c bt.c ring.c shield.c ld.c event.c sac.c
  message.c poolmrg.c poolmfs.c poolmv.c dbgpool.c dbgpooli.c boot.c
  meter.c splay.c cbs.c version.c
;

mps_sources_MACOSX_PPC = 
  lockan.c than.c vmxc.c protxc.c protxcpp.c prmcan.c span.c ssxcpp.s
;

mps_sources_LINUX_X86 =
  lockli.c thlii4.c pthrdext.c vmli.c protli.c protlii3.c proti3.c prmci3li.c sslii3.c span.c
;

mps_sources_FREEBSD =
  lockfr.c thfri4.c pthrdext.c vmfr.c protfr.c protfri3.c prmcan.c ssfri3.c span.c
;

mps_sources_NT_X86 =
  abq.c lockw3.c mpsiw3.c poolmv2.c prmci3w3.c proti3.c protw3.c spi3.c
  ssw3i3.c thw3i3.c vmw3.c
;

amcss_sources =
  amcss.c fmtdy.c fmtno.c fmtdytst.c mpsliban.c mpsioan.c poolamc.c
  testlib.c
;
amcss_libraries = mps ;
amcss_linklibs_LINUX = -lm -lpthread ;
amcss_linklibs_FREEBSD = -lm -lpthread ;

mpmss_sources = mpmss.c mpsliban.c mpsioan.c poolmvff.c testlib.c ;
mpmss_libraries = mps ;
mpmss_linklibs_LINUX = -lm -lpthread ;
mpmss_linklibs_FREEBSD = -lm -lpthread ;


# Options for the commands in the various toolsets

toolsets = gc mv ;

# GNU toolset, in particular GCC

ccopts_gc = 
    -ansi -pedantic -Wall -Werror -Wpointer-arith -Wstrict-prototypes
    -Wmissing-prototypes -Winline -Waggregate-return -Wnested-externs
    -Wcast-qual -Wshadow
  ;

# Microsoft Visual C toolset

ccopts_mv = /nologo /W4 /WX ;
ccopts_mv_hi = /MT /Ox /DNDEBUG ;
ccopts_mv_ci = /MT /Od /Zi ;


# Flagrant assumptions about the toolset based on the platform.

switch $(OS) {
case MACOSX : toolset = gc ;
case NT : toolset = mv ;
}


# From here down it's just rules and shouldn't need modifying as long as
# the structure of the build doesn't change.

# For every thing we're going to build, append platform specific sources to
# the list of sources.

for thing in $(libraries) $(tests) {
  if $($(thing)_sources_$(OS)) {
    $(thing)_sources += $($(thing)_sources_$(OS)) ;
  }
  if $($(thing)_sources_$(OS)_$(OSPLAT)) {
    $(thing)_sources += $($(thing)_sources_$(OS)_$(OSPLAT)) ;
  }
}

for variety in $(varieties) {

  # We're going to build one of everything for each variety into subdirectories
  # under the "build" directory.

  MkDir build$(SLASH)$(variety) ;

  # This is how to make a library from object files.

  for library in $(libraries) {
    LibraryFromObjects build$(SLASH)lib$(library)$(variety) : build$(SLASH)$(variety)$(SLASH)$($(library)_sources:S=$(SUFOBJ)) ;
    Depends build$(SLASH)$(variety)$(SLASH)$(library) : build$(SLASH)$(variety) ;
  }

  # This is how to make a test program from object files.

  for test in $(tests) {
    MainFromObjects build$(SLASH)$(variety)$(SLASH)$(test) : build$(SLASH)$(variety)$(SLASH)$($(test)_sources:S=$(SUFOBJ)) ;
    LinkLibraries build$(SLASH)$(variety)$(SLASH)$(test) : build$(SLASH)lib$($(test)_libraries)$(variety) ;
    LINKFLAGS on build$(SLASH)$(variety)$(SLASH)$(test) = $($(test)_linklibs_$(OS)) ;
    Depends build$(SLASH)$(variety)$(SLASH)$(test) : build$(SLASH)$(variety) ;
  }

  # This is how to make object files from source files.
  
  for thing in $(libraries) $(tests) {
    for source in $($(thing)_sources) {
      Object build$(SLASH)$(variety)$(SLASH)$(source:S=$(SUFOBJ)) : code$(SLASH)$(source) ;
      Depends build$(SLASH)$(variety)$(SLASH)$(source:S=$(SUFOBJ)) : build$(SLASH)$(variety) ;
      ObjectCcFlags build$(SLASH)$(variety)$(SLASH)$(source:S=$(SUFOBJ)) :
        $(ccopts_$(toolset))
        $(ccopts_$(toolset)_$(variety))
        -D$(defs)
        -D$(defs_$(variety))
        -D$(defs_$(OS))
      ;
    }
  }
}

prefix ?= /usr/local ;
libdir = $(prefix)/lib ;
mandir = $(prefix)/man ;
includedir = $(prefix)/include ;

for variety in $(varieties) {
  for library in $(libraries) {
    InstallLib $(libdir) : build/$(library)$(variety) ;
  }
}

.. mode: -*- rst -*-

Segment data structure
======================

:Tag: design.mps.seg
:Author: David Jones
:Date: 1997-04-03
:Status: incomplete design
:Revision: $Id$
:Copyright: See `Copyright and License`_.
:Index terms:    pair: segments; design


Introduction
------------

_`.intro`: This document describes the MPS Segment data structure.


Overview
--------

_`.over.segments`: Segments are the basic units of tracing and
shielding. The MPM also uses them as units of scanning and colour,
although pool classes may subdivide segments and be able to maintain
colour on a finer grain (down to the object level, for example).

_`.over.objects`: The mutator's objects are stored in segments.
Segments are contiguous blocks of memory managed by some pool.

_`.segments.pool`: The arrangement of objects within a segment is
determined by the class of the pool which owns the segment. The pool
is associated with the segment indirectly via the first tract of the
segment.

_`.over.memory`: The relationship between segments and areas of memory
is maintained by the segment module. Pools acquire tracts from the
arena, and release them back to the arena when they don't need them
any longer. The segment module can associate contiguous tracts owned
by the same pool with a segment. The segment module provides the
methods SegBase, SegLimit, and SegSize which map a segment onto the
addresses of the memory block it represents.

_`.over.hierarchy`: The Segment datastructure is designed to be
subclassable (see design.mps.protocol). The basic segment class
(``Seg``) supports colour and protection for use by the tracer, as
well as support for a pool ring, and all generic segment functions.
Clients may use ``Seg`` directly, but will most probably want to use a
subclass with additional properties.

_`.over.hierarchy.gcseg`: The segment module provides ``GCSeg`` - a
subclass of ``Seg`` which has full support for GC including buffering
and the ability to be linked onto the grey ring.


Data Structure
--------------

``typedef struct SegStruct *Seg``
``typedef struct GCSegStruct *GCSeg``

The implementations are as follows::

    typedef struct SegStruct {      /* segment structure */
      Sig sig;                      /* impl.h.misc.sig */
      SegClass class;               /* segment class structure */
      Tract firstTract;             /* first tract of segment */
      RingStruct poolRing;          /* link in list of segs in pool */
      Addr limit;                   /* limit of segment */
      unsigned depth : SHIELD_DEPTH_WIDTH; /* see impl.c.shield.def.depth */
      AccessSet pm : AccessMAX;     /* protection mode, impl.c.shield */
      AccessSet sm : AccessMAX;     /* shield mode, impl.c.shield */
      TraceSet grey : TRACE_MAX;    /* traces for which seg is grey */
      TraceSet white : TRACE_MAX;   /* traces for which seg is white */
      TraceSet nailed : TRACE_MAX;  /* traces for which seg has nailed objects */
      RankSet rankSet : RankMAX;    /* ranks of references in this seg */
    } SegStruct;


    typedef struct GCSegStruct {    /* GC segment structure */
      SegStruct segStruct;          /* superclass fields must come first */
      RingStruct greyRing;          /* link in list of grey segs */
      RefSet summary;               /* summary of references out of seg */
      Buffer buffer;                /* non-NULL if seg is buffered */
      Sig sig;                      /* design.mps.sig */
    } GCSegStruct;


_`.field.rankSet`: The ``rankSet`` field represents the set of ranks
of the references in the segment. It is initialized to empty by
``SegInit()``.

_`.field.rankSet.single`: The Tracer only permits one rank per segment
[ref?] so this field is either empty or a singleton.

_`.field.rankSet.empty`: An empty ``rankSet`` indicates that there are
no references. If there are no references in the segment then it
cannot contain black or grey references.

_`.field.rankSet.start`: If references are stored in the segment then
it must be updated, along with the summary (`.field.summary.start`_).

_`.field.depth`: The ``depth`` field is used by the Shield
(impl.c.shield) to manage protection of the segment. It is initialized
to zero by ``SegInit()``.

_`.field.sm`: The ``sm`` field is used by the Shield (impl.c.shield)
to manage protection of the segment. It is initialized to
``AccessSetEMPTY`` by ``SegInit()``.

_`.field.pm`: The ``pm`` field is used by the Shield (impl.c.shield)
to manage protection of the segment. It is initialized to
``AccessSetEMPTY`` by ``SegInit()``. The field is used by both the
shield and the ANSI fake protection (impl.c.protan).

_`.field.black`: The ``black`` field is the set of traces for which
there may be black objects (that is, objects containing references,
but no references to white objects) in the segment. More precisely, if
there is a black object for a trace in the segment then that trace
will appear in the ``black`` field. It is initialized to
``TraceSetEMPTY`` by ``SegInit()``.

_`.field.grey`: The ``grey`` field is the set of traces for which
there may be grey objects (i.e containing references to white objects)
in the segment. More precisely, if there is a reference to a white
object for a trace in the segment then that trace will appear in the
``grey`` field. It is initialized to ``TraceSetEMPTY`` by ``SegInit()``.

_`.field.white`: The ``white`` field is the set of traces for which
there may be white objects in the segment. More precisely, if there is
a white object for a trace in the segment then that trace will appear
in the ``white`` field. It is initialized to ``TraceSetEMPTY`` by
``SegInit()``.

_`.field.summary`: The ``summary`` field is an approximation to the
set of all references in the segment. If there is a reference ``R`` in
the segment, then ``RefSetIsMember(summary, R)`` is ``TRUE``. The
summary is initialized to ``RefSetEMPTY`` by ``SegInit()``.

_`.field.summary.start`: If references are stored in the segment then
it must be updated, along with ``rankSet`` (`.field.rankSet.start`_).

_`.field.buffer`: The ``buffer`` field is either ``NULL``, or points
to the descriptor structure of the buffer which is currently
allocating in the segment. The field is initialized to ``NULL`` by
``SegInit()``.

_`.field.buffer.owner`: This buffer must belong to the same pool as
the segment, because only that pool has the right to attach it.


Document History
----------------

- 1997-04-03 RB_ Initial draft (replacing various notes in revisions 0
  and 1) was as part of editing MMsrc!seg.c(MMdevel_action2.1).

- 1999-04-16 Tony Mann. Rewritten to separate segments and tracts,
  following mail.tony.1998-11-02.10-26

- 2002-06-07 RB_ Converted from MMInfo database design document.

- 2014-04-16 GDR_ Removed material on splitting and merging.

.. _RB: http://www.ravenbrook.com/consultants/rb/
.. _GDR: http://www.ravenbrook.com/consultants/gdr/


Copyright and License
---------------------

Copyright Â© 2001-2014 Ravenbrook Limited. All rights reserved. 
<http://www.ravenbrook.com/>. This is an open source license. Contact
Ravenbrook for commercial licensing options.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

#. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

#. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

#. Redistributions in any form must be accompanied by information on how
   to obtain complete source code for this software and any
   accompanying software that uses this software.  The source code must
   either be included in the distribution or be available for no more than
   the cost of distribution plus a nominal fee, and must be freely
   redistributable under reasonable conditions.  For an executable file,
   complete source code means the source code for all modules it contains.
   It does not include source code for modules or files that typically
   accompany the major components of the operating system on which the
   executable file runs.

**This software is provided by the copyright holders and contributors
"as is" and any express or implied warranties, including, but not
limited to, the implied warranties of merchantability, fitness for a
particular purpose, or non-infringement, are disclaimed.  In no event
shall the copyright holders and contributors be liable for any direct,
indirect, incidental, special, exemplary, or consequential damages
(including, but not limited to, procurement of substitute goods or
services; loss of use, data, or profits; or business interruption)
however caused and on any theory of liability, whether in contract,
strict liability, or tort (including negligence or otherwise) arising in
any way out of the use of this software, even if advised of the
possibility of such damage.**
